matrix:
  allow_failures:
    - os: windows
  include:
    - os: osx
      language: node_js
      node_js:
          # Must use node 8 while on electron 2.x (for safe.spec tests.)
        - 8
      env:
        - ELECTRON_CACHE=$HOME/.cache/electron
        - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder
        - NODE_ENV=dev

    - os: linux
      language: node_js
      node_js:
        - 8
      env:
        - NODE_ENV=dev
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-multilib
            - g++-8
            - g++-multilib
            - icnsutils
            - graphicsmagick
            - xz-utils
            - xorriso
            - rpm

    # - os: windows
    #   language: node_js
    #   node_js:
    #     - 8
    #   env:
    #     - ELECTRON_CACHE=$HOME/.cache/electron
    #     - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder
    #     - NODE_ENV=dev


before_cache:
  - rm -rf $HOME/.cache/electron-builder/wine

cache:
  yarn: true
  directories:
    - node_modules
    - $(npm config get prefix)/lib/node_modules
    - flow-typed
    - $HOME/.cache/electron
    - $HOME/.cache/electron-builder

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export CXX="g++-8"; fi

install:
  - yarn --ignore-engines
  # On Linux, initialize "virtual display". See before_script
  - |
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      /sbin/start-stop-daemon \
      --start \
      --quiet \
      --pidfile /tmp/custom_xvfb_99.pid \
      --make-pidfile \
      --background \
      --exec /usr/bin/Xvfb \
      -- :99 -ac -screen 0 1280x1024x16
    else
      :
    fi
  - yarn package


before_script:
  # osx set window size
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then "/Library/Application Support/VMware Tools/vmware-resolutionSet" 1920 1080;
    fi
  # On Linux, create a "virtual display". This allows browsers to work properly
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export DISPLAY=:99.0; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sh -e /etc/init.d/xvfb start; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sleep 3; fi

script:
# update the xdg implementation on the machine. older version is buggy
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then cp node_modules/opn/xdg-open ~/bin/;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then xdg-open --version;
    fi
  - yarn run test-peruse
  # Split into smaller test subsets to facilitate retries only on smaller portions of the tests
  - travis_retry eval "pkill -f electron || pkill -f SAFE Browser ||  yarn test-e2e __e2e__/peruse.spec.js"
  - sleep 5
  - travis_retry eval "pkill -f electron || pkill -f SAFE Browser ||  yarn test-e2e __e2e__/settingsMenu.spec.js"
  - sleep 5
  - travis_retry eval "pkill -f electron || pkill -f SAFE Browser ||  yarn test-e2e __e2e__/navigation.spec.js"
  - sleep 5
  - travis_retry eval "pkill -f electron || pkill -f SAFE Browser || yarn run test-e2e e2e/safe-auth"
  - travis_retry eval "pkill -f electron || pkill -f SAFE Browser || yarn run test-e2e e2e/safe-mock"
  - travis_retry eval "pkill -f electron || pkill -f SAFE Browser || yarn run test-e2e e2e/safe.spec"
  - sleep 5
  - if [[ "$TRAVIS_OS_NAME" != "linux" ]]; then travis_retry eval "pkill -f electron || pkill -f SAFE Browser || yarn run test-e2e network.spec";
    fi


after_failure:
- ls /home/travis/safe-browser/app/node_modules/@maidsafe/safe-node-app/src/native
# - cat ~/.local/share/applications/mimeapps.list
# - cat ~/.local/share/applications/maidsafenet-ltd-safe-browser-authenticator.desktop
- which xdg-open
- xdg-open --version
# - bash -x ~/bin/xdg-open safe-auth://whaaaaa
- cat $TMPDIR/safe-browser.log;
# check resolution...
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then  system_profiler SPDisplaysDataType | grep Resolution
  fi


before_deploy:

- rm -rf node_modules/@maidsafe/safe-node-app/src/native/mock
- rm -rf app/extensions/safe/dist/mock/
- NODE_ENV=prod yarn package
- cd release;
- |
  ls . | grep safe | while read RELEASE; do
  echo "deploying ${RELEASE} to GitHub releases as tagged with ${TRAVIS_TAG}";
  if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then ditto -c -k --sequesterRsrc --keepParent ${RELEASE} ${RELEASE}.zip;
  fi
  if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then zip -r -q ${RELEASE}.zip ${RELEASE};
  fi
  done
# don't fail if nothing to do.
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then zip -d *.zip *.DS_Store && zip -d *.zip  __MACOSX/\* || true;
  fi
- cd ..
- ls release
- export RELEASE_PROD_ZIP="$(ls release/*-x64.zip)";
- export RELEASE_DEV_ZIP="$(ls release/*-dev.zip)";
- echo "deploying ${RELEASE_PROD_ZIP} to GitHub releases as tagged with ${TRAVIS_TAG}"
- echo "deploying ${RELEASE_DEV_ZIP} to GitHub releases as tagged with ${TRAVIS_TAG}"
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sha256sum release/*-x64.zip >> $RELEASE_PROD_ZIP.txt; fi
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sha256sum release/*-dev.zip >> $RELEASE_DEV_ZIP.txt; fi
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then shasum -a 256 release/*-x64.zip >> $RELEASE_PROD_ZIP.txt; fi
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then shasum -a 256 release/*-dev.zip >> $RELEASE_DEV_ZIP.txt; fi
- ls release
- export SHA_256_SUM_PROD="$(ls release/*-x64.zip.txt)";
- export SHA_256_SUM_DEV="$(ls release/*-dev.zip.txt)";


deploy:
  provider: releases
  skip_cleanup: true
  api_key: $GITHUB_ACCESS_TOKEN
  file:
    - "${RELEASE_PROD_ZIP}"
    - "${RELEASE_DEV_ZIP}"
    - "${SHA_256_SUM_DEV}"
    - "${SHA_256_SUM_PROD}"
  draft: true
  tag_name: $TRAVIS_TAG
  on:
    tags: true
    branch: master
